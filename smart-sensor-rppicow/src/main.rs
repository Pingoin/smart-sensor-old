#![no_std]
#![no_main]
#![feature(type_alias_impl_trait)]
#![feature(async_fn_in_trait)]
#![allow(incomplete_features)]

use core::str::from_utf8;
use cyw43_pio::PioSpi;
use defmt::*;
use embassy_executor::Spawner;
use embassy_net::tcp::TcpSocket;
use embassy_net::{Config, Ipv4Address, Ipv4Cidr, Stack, StackResources};
use embassy_rp::gpio::{Level, Output};
use embassy_rp::peripherals::{DMA_CH0, PIN_23, PIN_25};
use embassy_rp::pio::{Pio0, PioPeripherial, PioStateMachineInstance, Sm0};
use embassy_time::{Duration, Timer};
use embedded_io::asynch::{Read, Write};
use heapless::Vec;
use numtoa::NumToA;
use static_cell::StaticCell;
use {defmt_rtt as _, panic_probe as _};

use rust_mqtt::{
    client::{client::MqttClient, client_config::ClientConfig},
    packet::v5::reason_codes::ReasonCode,
    utils::rng_generator::CountingRng,
};

macro_rules! singleton {
    ($val:expr) => {{
        type T = impl Sized;
        static STATIC_CELL: StaticCell<T> = StaticCell::new();
        STATIC_CELL.init_with(move || $val)
    }};
}

#[embassy_executor::task]
async fn wifi_task(
    runner: cyw43::Runner<
        'static,
        Output<'static, PIN_23>,
        PioSpi<PIN_25, PioStateMachineInstance<Pio0, Sm0>, DMA_CH0>,
    >,
) -> ! {
    runner.run().await
}

#[embassy_executor::task]
async fn net_task(stack: &'static Stack<cyw43::NetDriver<'static>>) -> ! {
    stack.run().await
}

#[embassy_executor::main]
async fn main(spawner: Spawner) {
    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = smart_sensor::CONFIG;
    info!("Hello World");
    let p = embassy_rp::init(Default::default());
    // Include the WiFi firmware and Country Locale Matrix (CLM) blobs.
    let fw = include_bytes!("../firmware/43439A0.bin");
    let clm = include_bytes!("../firmware/43439A0_clm.bin");

    // To make flashing faster for development, you may want to flash the firmwares independently
    // at hardcoded addresses, instead of baking them into the program with `include_bytes!`:
    //     probe-rs-cli download 43439A0.bin --format bin --chip RP2040 --base-address 0x10100000
    //     probe-rs-cli download 43439A0_clm.bin --format bin --chip RP2040 --base-address 0x10140000
    //let fw = unsafe { core::slice::from_raw_parts(0x10100000 as *const u8, 224190) };
    //let clm = unsafe { core::slice::from_raw_parts(0x10140000 as *const u8, 4752) };

    let pwr = Output::new(p.PIN_23, Level::Low);
    let cs = Output::new(p.PIN_25, Level::High);

    let (_, sm, _, _, _) = p.PIO0.split();
    let dma = p.DMA_CH0;
    let spi = PioSpi::new(sm, cs, p.PIN_24, p.PIN_29, dma);

    let state = singleton!(cyw43::State::new());
    let (net_device, mut control, runner) = cyw43::new(state, pwr, spi, fw).await;
    unwrap!(spawner.spawn(wifi_task(runner)));

    control.init(clm).await;
    control
        .set_power_management(cyw43::PowerManagementMode::PowerSave)
        .await;

    //let config = Config::Dhcp(Default::default());
    let config = Config::Static(embassy_net::StaticConfig {
        address: Ipv4Cidr::new(Ipv4Address::from_bytes(&app_config.ip), 24),
        dns_servers: Vec::new(),
        gateway: Some(Ipv4Address::from_bytes(&app_config.gateway)),
    });

    // Generate random seed
    let seed = 0x0123_4567_89ab_cdef; // chosen by fair dice roll. guarenteed to be random.

    // Init network stack
    let stack = &*singleton!(Stack::new(
        net_device,
        config,
        singleton!(StackResources::<2>::new()),
        seed
    ));

    unwrap!(spawner.spawn(net_task(stack)));

    //control.join_open(env!("WIFI_NETWORK")).await;
    control
        .join_wpa2(app_config.wifi_ssid, app_config.wifi_psk)
        .await;

    info!("{:?}", 3);

    // Then we can use it!
    let mut rx_buffer = [0; 4096];
    let mut tx_buffer = [0; 4096];

    let mut sock = TcpSocket::new(stack, &mut rx_buffer, &mut tx_buffer);
    sock.set_timeout(Some(embassy_net::SmolDuration::from_secs(5)));
    sock.set_keep_alive(Some(embassy_net::SmolDuration::from_secs(2)));

    Timer::after(Duration::from_secs(10)).await;

    let remote_endpoint = (Ipv4Address::from_bytes(&app_config.mqtt_server), 1883);
    info!("connecting to {:?}...", remote_endpoint);
    let r = sock.connect(remote_endpoint).await;
    if let Err(e) = r {
        warn!("connect error: {:?}", e);
        return;
    }
    info!("connected!");

    let mut config = ClientConfig::new(
        rust_mqtt::client::client_config::MqttVersion::MQTTv5,
        CountingRng(20000),
    );
    config.add_max_subscribe_qos(rust_mqtt::packet::v5::publish_packet::QualityOfService::QoS1);
    config.add_client_id("client");
    // config.add_username(USERNAME);
    // config.add_password(PASSWORD);
    config.max_packet_size = 100;
    let mut recv_buffer = [0; 100];
    let mut write_buffer = [0; 100];

    let mut client =
        MqttClient::<_, 5, _>::new(sock, &mut write_buffer, 100, &mut recv_buffer, 100, config);

    let mut bla = 0u8;
    let mut output_buffer = [0u8; 10];

    match client.connect_to_broker().await {
        Ok(_) => {}
        Err(err) => {
            warn!("error connecting to mqtt: {:?}", err)
        }
    };
let mut led=true;
    loop {
        control.gpio_set(0, led).await;
        led=!led;
        client
            .send_message(
                "hello/gurke",
                bla.numtoa(10, &mut output_buffer),
                rust_mqtt::packet::v5::publish_packet::QualityOfService::QoS0,
                true,
            )
            .await
            .unwrap();
        info!("pong");
        for _ in 0..10 {
            Timer::after(Duration::from_secs(1)).await;
            info!("ping");
            client.send_ping().await.unwrap();
        }

        bla += 1;
        bla %= 100;
    }
}
