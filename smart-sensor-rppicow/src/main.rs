#![no_std]
#![no_main]
#![feature(type_alias_impl_trait)]
#![feature(async_fn_in_trait)]
#![allow(incomplete_features)]

use cyw43_pio::PioSpi;
use defmt::*;
use embassy_executor::Spawner;

use embassy_net::udp::UdpSocket;
use embassy_net::{Config, Ipv4Address, Ipv4Cidr, PacketMetadata, Stack, StackResources};
use embassy_rp::adc::{self, Adc};
use embassy_rp::gpio::{Level, Output, Pin};
use embassy_rp::interrupt;
use embassy_rp::peripherals::{DMA_CH0, PIN_23, PIN_25};
use embassy_rp::pio::{Pio0, PioPeripheral, PioStateMachineInstance, Sm0};
use embassy_time::{Duration, Ticker, Timer};
use heapless::Vec;
mod converts;
mod mqtt;
mod neo_pixel;

use smart_sensor::{mutex_box::MutexBox, round_to_n_places, SensorData};
use static_cell::StaticCell;
use wall_clock_time::clock_time::ClockTime;
use wall_clock_time::sntpc;
use {defmt_rtt as _, panic_probe as _};

use crate::converts::convert_to_celsius;
use crate::neo_pixel::{led_task, Ws2812};

macro_rules! singleton {
    ($val:expr) => {{
        type T = impl Sized;
        static STATIC_CELL: StaticCell<T> = StaticCell::new();
        STATIC_CELL.init_with(move || $val)
    }};
}

static SENSOR_DATA: MutexBox<SensorData> = MutexBox::new("sensor_data");

#[embassy_executor::task]
pub async fn ntp_task(stack: &'static Stack<cyw43::NetDriver<'static>>, server: Ipv4Address) {
    // Then we can use it!
    let mut rx_meta = [PacketMetadata::EMPTY; 16];
    let mut rx_buffer = [0; 4096];
    let mut tx_meta = [PacketMetadata::EMPTY; 16];
    let mut tx_buffer = [0; 4096];

    let mut socket = UdpSocket::new(
        stack,
        &mut rx_meta,
        &mut rx_buffer,
        &mut tx_meta,
        &mut tx_buffer,
    );
    socket.bind(9400).unwrap();
    let mut time = ClockTime::new();
    let mut ntp_client = sntpc::NtpTime::new(socket, (server, 123));
    loop {
        let result = ntp_client.update_time(time.get_unix_time()).await;
        if let Some(timestamp) = result {
            time.update(timestamp);
            let datetime = time.get_date_time();
            println!(
                "Got time: {:02}:{:02}:{:02}.{:03}",
                datetime.hour+2, datetime.minute, datetime.second, datetime.millis
            );
        }
        Timer::after(Duration::from_secs(3)).await;
    }
}

#[embassy_executor::task]
async fn wifi_task(
    runner: cyw43::Runner<
        'static,
        Output<'static, PIN_23>,
        PioSpi<PIN_25, PioStateMachineInstance<Pio0, Sm0>, DMA_CH0>,
    >,
) -> ! {
    runner.run().await
}

#[embassy_executor::task]
async fn net_task(stack: &'static Stack<cyw43::NetDriver<'static>>) -> ! {
    stack.run().await
}

#[embassy_executor::main]
async fn main(spawner: Spawner) {
    {
        let mut sens = SensorData::default();
        sens.system_voltage = Some(100.09);
        sens.version = (0, 1, 0);
        SENSOR_DATA.init(sens);
        SENSOR_DATA.open_locked(|data| {
            data.humidity = Some(1013.15);
            data.pressure = Some(100.9);
            data.temperature = Some(99.5);
            data.battery_voltage = Some(99.5);
        });
    }

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = smart_sensor::CONFIG;
    info!("Hello World");
    let p = embassy_rp::init(Default::default());
    // Include the WiFi firmware and Country Locale Matrix (CLM) blobs.
    let fw = include_bytes!("../firmware/43439A0.bin");
    let clm = include_bytes!("../firmware/43439A0_clm.bin");

    // To make flashing faster for development, you may want to flash the firmwares independently
    // at hardcoded addresses, instead of baking them into the program with `include_bytes!`:
    //     probe-rs-cli download 43439A0.bin --format bin --chip RP2040 --base-address 0x10100000
    //     probe-rs-cli download 43439A0_clm.bin --format bin --chip RP2040 --base-address 0x10140000
    //let fw = unsafe { core::slice::from_raw_parts(0x10100000 as *const u8, 224190) };
    //let clm = unsafe { core::slice::from_raw_parts(0x10140000 as *const u8, 4752) };

    let pwr = Output::new(p.PIN_23, Level::Low);
    let cs = Output::new(p.PIN_25, Level::High);

    let (_, sm, _, _, _) = p.PIO0.split();
    let dma = p.DMA_CH0;
    let spi = PioSpi::new(sm, cs, p.PIN_24, p.PIN_29, dma);

    let state = singleton!(cyw43::State::new());
    let (net_device, mut control, runner) = cyw43::new(state, pwr, spi, fw).await;
    unwrap!(spawner.spawn(wifi_task(runner)));

    control.init(clm).await;
    control
        .set_power_management(cyw43::PowerManagementMode::PowerSave)
        .await;

    //let config = Config::Dhcp(Default::default());
    let config = Config::Static(embassy_net::StaticConfig {
        address: Ipv4Cidr::new(Ipv4Address::from_bytes(&app_config.ip), 24),
        dns_servers: Vec::new(),
        gateway: Some(Ipv4Address::from_bytes(&app_config.gateway)),
    });

    // Generate random seed
    let seed = 0x0123_4567_89ab_cdef; // chosen by fair dice roll. guarenteed to be random.

    // Init network stack
    let stack = &*singleton!(Stack::new(
        net_device,
        config,
        singleton!(StackResources::<2>::new()),
        seed
    ));

    unwrap!(spawner.spawn(net_task(stack)));
    //control.join_open(env!("WIFI_NETWORK")).await;
    control
        .join_wpa2(app_config.wifi_ssid, app_config.wifi_psk)
        .await;
    let mut ticker = Ticker::every(Duration::from_secs(10));
    unwrap!(spawner.spawn(mqtt::mqtt_task(
        stack,
        Ipv4Address::from_bytes(&app_config.mqtt_server)
    )));
    unwrap!(spawner.spawn(ntp_task(
        stack,
        Ipv4Address::from_bytes(&[192, 168, 178, 1])
    )));

    let irq = interrupt::take!(ADC_IRQ_FIFO);
    let mut adc = Adc::new(p.ADC, irq, adc::Config::default());
    let (_pio0, sm0, _sm1, _sm2, _sm3) = p.PIO1.split();
    let ws2812 = Ws2812::new(sm0, p.PIN_19.degrade());

    unwrap!(spawner.spawn(led_task(ws2812)));

    let mut led = true;
    loop {
        control.gpio_set(0, led).await;
        led = !led;
        let temp = adc.read_temperature().await;
        let temp = round_to_n_places(convert_to_celsius(temp), 1);

        SENSOR_DATA.open_locked(|data| {
            data.core_temperature = Some(temp);
        });

        info!("Temp: {} degrees", temp);
        ticker.next().await;
    }
}
